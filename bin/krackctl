#!/usr/bin/env bash
#
# Description: Control script for krack-build
#
# Homepage: https://git.sr.ht/~krathalan/krack
#
# Copyright (C) 2020 Hunter Peavey
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Source a lot of common (between krack scripts) variables
# shellcheck disable=SC1091
source /usr/lib/krack/common

# Other
readonly SCRIPT_NAME="${0##*/}"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

awaken()
{
  touch "${STATUS_DIR}/krack-request-awaken"
}

build_all()
{
  touch "${DATA_DIR}"/packages/*/krack-request-build
  print_info "Full rebuilds requested"
  rm -rf "${DATA_DIR}"/cache/*
  print_info "Package cache cleared"
}

create_chroot()
{
  # shellcheck disable=SC1091
  source /etc/krack/build.conf

  sudo mkdir -p "${MAKECHROOTPKG_DIR}"
  sudo mkarchroot "${MAKECHROOTPKG_DIR}"/root base-devel ccache
  print_info "Done making ${MAKECHROOTPKG_DIR} makechrootpkg dir."
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

#######################################
# Prints information about how to use this script.
# Copyright (C) 2016-2019 Dylan Araps
# Globals:
#   SCRIPT_NAME
# Arguments:
#   none
# Returns:
#   none
#######################################
print_help()
{
  printf "%s" "\
${SCRIPT_NAME} - control script for a running krack-build

$ krackctl create-chroot  Creates the Arch chroot for makechrootpkg to build
                          packages in.

$ krackctl status  Prints the current status of the running krack-build.

$ krackctl awaken  Wakes krack-build up to start building packages immediately.
                   Resets the next build time. If Krack is currently building
                   packages, builds will start immediately again after Krack is
                   finished with the current set.

$ krackctl build-all  Touches krack-request-build in every package directory,
                      forcing all builds the next time krack-build wakes up.
                      Also clears the krack-build package cache.
"

  exit 0
}

#######################################
# Prints an info message.
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
print_info()
{
  printf "%sInfo:%s %s\n" "${WHITE}" "${NC}" "$1"
}

status()
{
  local start_time_unix
  local time_now_unix
  local date_diff

  [[ ! -d "${STATUS_DIR}" ]] &&
    exit_script_on_failure "Status files not found. Have you ran krack-build yet?"

  printf "Krack version %s\n" "${VERSION}"
  printf "State: %s" "$(<"${STATUS_STATE_FILE}")"

  if grep -q building "${STATUS_STATE_FILE}"; then
    # Calculate how long state has been "building"
    start_time_unix="$(<"${STATUS_DATE_BUILD_START_FILE}")"
    time_now_unix="$(date +%s)"
    date_diff="$(( time_now_unix - start_time_unix ))"
    printf ", running for %s" "$(date -d@${date_diff} -u +%H:%M:%S)"

    printf "\nSubstate: %s" "$(<"${STATUS_SUBSTATE_FILE}")"
    
    if grep -q making "${STATUS_SUBSTATE_FILE}"; then
      # Calculate how long state has been "making"
      start_time_unix="$(<"${STATUS_DATE_MAKE_START_FILE}")"
      date_diff="$(( time_now_unix - start_time_unix ))"
      printf ", running for %s" "$(date -d@${date_diff} -u +%H:%M:%S)"
    fi
  fi

  printf "\n"
  printf "Latest important message: %s\n" "$(<"${STATUS_IMPORTANT_MESSAGE_FILE}")"

  printf "Latest log entry: %s" "$(tail -n1 "$(<"${STATUS_CURRENT_LOG_FILE}")")"
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ "$1" != "create-chroot" ]] && [[ "$(whoami)" == "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

case "$1" in
  awaken) awaken ;;
  build-all) build_all ;;
  create-chroot) create_chroot ;;
  status) status ;;
  *) print_help ;;
esac