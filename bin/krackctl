#!/usr/bin/env bash
#
# Description: Control script for krack-build
#
# Homepage: https://git.sr.ht/~krathalan/krack
# Copyright (C) 2020-2021 Hunter Peavey
# SPDX-License-Identifier: GPL-3.0-or-later

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Source a lot of common (between krack scripts) variables
# shellcheck disable=SC1091
source /usr/lib/krack/common

# Other
readonly SCRIPT_NAME="${0##*/}"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

print_info()
{
  printf "%sInfo:%s %s\n" "${WHITE}" "${NC}" "$1"
}

awaken()
{
  touch "${STATUS_DIR}/krack-request-awaken"
  print_info "Wakey wakey eggs and bakey"
}

build_all()
{
  touch "${DATA_DIR}"/packages/*/krack-request-build
  print_info "Full rebuilds requested"
  rm -rf "${DATA_DIR}"/cache/*
  print_info "Package cache cleared"
}

clean_logs()
{
  # find/printf syntax from:
  # https://stackoverflow.com/questions/4561895/how-to-recursively-find-the-latest-modified-file-in-a-directory/4561987#4561987
  mapfile -t newest_logs <<< "$(find "${LOG_DIR}" -type f -printf '%T@ %p\n' | sort -n | tail -"$1" | cut -f2- -d" ")"

  for logfile in "${LOG_DIR}"/*; do
    if [[ ! -d "${logfile}" ]] && [[ "${newest_logs[*]}" != *"${logfile##*/}"* ]]; then
      rm -f "${logfile}"
    fi
  done
}

create_chroot()
{
  # shellcheck disable=SC1091
  source /etc/krack/build.conf

  [[ -e "${MAKECHROOTPKG_DIR}" ]] &&
    exit_script_on_failure "Something already exists at ${MAKECHROOTPKG_DIR}."

  sudo mkdir -p "${MAKECHROOTPKG_DIR}"
  sudo mkarchroot "${MAKECHROOTPKG_DIR}"/root base-devel ccache
  print_info "Done making ${MAKECHROOTPKG_DIR} makechrootpkg dir."
}

request_build()
{
  shift 

  while [[ $# -gt 0 ]]; do
    [[ ! -e "${MASTER_BUILD_DIR}/$1" ]] &&
      exit_script_on_failure "Cannot find package $1"

    touch "${MASTER_BUILD_DIR}/$1/krack-request-build"
    print_info "Build requested for package $1"
    shift
  done
}

pending_builds()
{
  local list_of_pending_builds
  local to_print
  mapfile -t list_of_pending_builds <<< "$(find "${MASTER_BUILD_DIR}" -name "krack-request-build")"

  printf "List of pending package build requests:\n---------------------------------------\n"

  for pending_build in "${list_of_pending_builds[@]}"; do
    # Use variable substitution to isolate name of pkg directory
    to_print="${pending_build%/*}"
    printf "%s\n" "${to_print##*/}"
  done
}

cancel_all_requests()
{
  local list_of_pending_builds
  local to_print
  mapfile -t list_of_pending_builds <<< "$(find "${MASTER_BUILD_DIR}" -name "krack-request-build")"

  for pending_build in "${list_of_pending_builds[@]}"; do
    rm -f "${pending_build}"
    to_print="${pending_build%/*}"
    print_info "Deleted build request for ${to_print##*/}"
  done
}

failed_builds()
{
  printf "Failed builds:\n--------------\n"

  # Check if failed log directory is empty
  if [[ -n "$(find "${FAILED_BUILDS_LOG_DIR}" -maxdepth 0 -empty)" ]]; then
    exit
  fi

  local step_counter=1

  # List build and date failed
  for failed_build in "${FAILED_BUILDS_LOG_DIR}"/*; do
    # Get file creation date of log file and make it more readable
    local log_creation_date
    log_creation_date="$(date -d "$(stat -c "%w" "${failed_build}")" "+%c")"

    printf "%s. %s%s%s (failed at %s%s%s)\n" "${step_counter}" "${YELLOW}" "${failed_build}" "${NC}" "${BLUE}" "${log_creation_date}" "${NC}"

    step_counter=$(( step_counter + 1 ))
  done
}

list_diffs()
{
  printf "Diffs:\n------\n"

  # Check if diff directory is empty
  if [[ -n "$(find "${GIT_DIFF_DIR}" -maxdepth 0 -empty)" ]]; then
    exit
  fi

  local step_counter=1

  for diff_file in "${GIT_DIFF_DIR}"/*; do
    # Get file creation date of diff file and make it more readable
    local diff_creation_date
    diff_creation_date="$(date -d "$(stat -c "%w" "${diff_file}")" "+%c")"

    printf "%s. %s%s%s (created at %s%s%s)\n" "${step_counter}" "${YELLOW}" "${diff_file}" "${NC}" "${BLUE}" "${diff_creation_date}" "${NC}"

    step_counter=$(( step_counter + 1 ))
  done
}

print_help()
{
  printf "Command not recognized. Open man page? "
  read -r -p "[y/N] " response

  case "${response}" in
    [yY][eE][sS]|[yY])
      man krackctl
      ;;
  esac
}

review_diffs()
{
  # Check if diff directory is empty
  if [[ -n "$(find "${GIT_DIFF_DIR}" -maxdepth 0 -empty)" ]]; then
    exit
  fi

  if command -v bat &> /dev/null; then
    krack_pager="bat"
  else
    krack_pager="${PAGER:-less}"
  fi

  for diff_file in "${GIT_DIFF_DIR}"/*; do
    "${krack_pager}" "${diff_file}"
  done

  printf "Done. Clear diffs? "
  read -r -p "[y/N] " response

  case "${response}" in
    [yY][eE][sS]|[yY])
      rm -f "${GIT_DIFF_DIR}"/*
      ;;
  esac
}

status()
{
  local start_time_unix
  local time_now_unix
  local date_diff

  [[ ! -d "${STATUS_DIR}" ]] &&
    exit_script_on_failure "Status files not found. Have you ran krack-build yet?"

  printf "%sState:%s %s" "${CYAN}" "${NC}" "$(<"${STATUS_STATE_FILE}")"

  if grep -q building "${STATUS_STATE_FILE}"; then
    # Calculate how long state has been "building"
    start_time_unix="$(<"${STATUS_DATE_BUILD_START_FILE}")"
    time_now_unix="$(date +%s)"
    date_diff="$(( time_now_unix - start_time_unix ))"
    printf ", running for %s" "$(date -d@${date_diff} -u +%H:%M:%S)"

    printf "\n%sSubstate:%s %s" "${CYAN}" "${NC}" "$(<"${STATUS_SUBSTATE_FILE}")"
    
    if grep -q making "${STATUS_SUBSTATE_FILE}"; then
      # Calculate how long state has been "making"
      start_time_unix="$(<"${STATUS_DATE_MAKE_START_FILE}")"
      date_diff="$(( time_now_unix - start_time_unix ))"
      printf ", running for %s" "$(date -d@${date_diff} -u +%H:%M:%S)"
    fi
  fi

  printf "\n"
  printf "%sLatest important messages, from most to least recent:%s\n%s\n" "${CYAN}" "${NC}" "$(tail -n8 "${STATUS_IMPORTANT_MESSAGE_FILE}" | tac)"

  printf "%sCurrent log file:%s %s\n" "${CYAN}" "${NC}" "$(find "${LOG_DIR}" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ")"

  # If user specified how many lines of log to show, use that
  # otherwise default to 10
  if [[ $# -gt 1 ]]; then
    shift
    local -r log_lines_to_watch="$1"
  else
    local -r log_lines_to_watch="10"
  fi

  local -r terminal_width="$(tput cols)"

  printf "%sLatest log entries:%s\n%s\n" "${CYAN}" "${NC}" "$(tail -n${log_lines_to_watch} "$(<"${STATUS_CURRENT_LOG_FILE}")" | cut -c 1-"${terminal_width}")"
}

watch_status()
{
  local -r tmpdir="$(mktemp -d -t "${SCRIPT_NAME}_XXXXXXXX")"
  local -r tmpfile="${tmpdir}/watch-status"

  trap 'rm -rf ${tmpdir}' INT SIGINT EXIT

  # To fill up the terminal completely and without cutting anything off the top,
  # we need to figure out (1) how many lines are available, and (2) how many lines
  # are being printed by the "latest important messages" section
  local -r terminal_height=$(tput lines)
  local -r base_lines_used="7" # Lines that are always printed, e.g. "Status: "
  local num_important_messages
  num_important_messages="$(wc -l "${STATUS_IMPORTANT_MESSAGE_FILE}" | cut -d' ' -f1)"

  # Max important messages displayed is 8
  if [[ "${num_important_messages}" -gt 8 ]]; then
    num_important_messages=8
  fi

  local log_display=$(( terminal_height - base_lines_used - num_important_messages ))

  while true; do
    status "status" "${log_display}" > "${tmpfile}"
    clear
    cat "${tmpfile}"
    # Recalculate lines 
    num_important_messages="$(wc -l "${STATUS_IMPORTANT_MESSAGE_FILE}" | cut -d' ' -f1)"

    # Max important messages displayed is 8
    if [[ "${num_important_messages}" -gt 8 ]]; then
      num_important_messages=8
    fi

    local log_display=$(( terminal_height - base_lines_used - num_important_messages ))
    sleep 1
  done
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ $# -lt 1 ]] && 
  print_help

[[ "$1" != "create-chroot" ]] && [[ "$(whoami)" == "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

# These commands require another argument
if [[ "$1" == "request-build" ]] && [[ $# -lt 2 ]]; then
  exit_script_on_failure "Please specify a package to request a build of."
elif [[ "$1" == "clean-logs" ]] && [[ $# -lt 2 ]]; then
  exit_script_on_failure "Please specify the number of latest logs to keep (e.g. 10)."
fi

case "$1" in
  awaken) awaken ;;
  build-all) build_all ;;
  clean-logs) clean_logs "$2" ;;
  create-chroot) create_chroot ;;
  failed-builds) failed_builds ;;
  list-diffs) list_diffs ;;
  review-diffs) review_diffs ;;
  request-build) request_build "$@" ;;
  pending-builds) pending_builds ;;
  cancel-all-requests) cancel_all_requests ;;
  status) status "$@" ;;
  watch-status) watch_status;;
  *) print_help ;;
esac