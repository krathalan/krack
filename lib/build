#!/usr/bin/env bash
#
# Description: Builds packages automatically forever and sends them
#              via rsync to a specified host.
#
# Homepage: https://github.com/krathalan/krack
# Copyright (C) 2020-2021 Hunter Peavey
# SPDX-License-Identifier: GPL-3.0-or-later

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# Kill possible waiting sleep process if krack-build is terminated
trap "clean_up && state death && kill 0" SIGINT EXIT

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Source a lot of common (between krack scripts) variables
# shellcheck disable=SC1091
source /usr/lib/krack/common

# Source user conf
# shellcheck disable=SC1091
source /etc/krack/build.conf

# Used for logging to track failed builds
TMP_DIR="$(mktemp -d -t "krack-build_XXXXXXXX")"
readonly TMP_DIR
readonly TMP_LOG="${TMP_DIR}/tmp.log"

# Used to track sleep cycle
NEXT_WAKE=""

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Checks to see if `krackctl awaken` has been invoked while
# krack-build is sleeping
# Globals:
#   STATUS_DIR
#   sleepPid
# Arguments:
#   none
# Returns:
#   none
#######################################
check_awaken_request()
{
  if [[ -f "${STATUS_DIR}/krack-request-awaken" ]]; then
    # Clean up request file
    rm -f "${STATUS_DIR}/krack-request-awaken"
    # Clean up our sleeping child....
    kill "${sleepPid}"
    return 0 # Awaken!
  else
    return 1 # Slumber...
  fi
}

#######################################
# Removes old build artifacts (packages, logs, sigs).
# Globals:
#   MASTER_BUILD_DIR
# Arguments:
#   none
# Returns:
#   none
#######################################
clean_pkgbuild_dirs()
{
  local toClean
  mapfile -t toClean <<< "$(find -L "${MASTER_BUILD_DIR}" -type f \( -name "*.gz" -o -name "*.xz" -o -name "*.zst" -o -name "*.lz4" -o -name "*.log" -o -name "*.sig" -o -name "*.asc" \))"

  for file in "${toClean[@]}"; do
    rm -f "${file}"
  done
}

#######################################
# Removes TMP_DIR used to store temporary build logs.
# Globals:
#   TMP_DIR
# Arguments:
#   none
# Returns:
#   none
#######################################
clean_up()
{
  rm -rf "${TMP_DIR}"
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  state "death"
  printf "%sERROR%s: %s\n" "${RED}" "${NC}" "$1" >&2

  if [[ "${LOG_SETTING}" == *"systemd"* ]]; then
    printf "ERROR: %s" "$1" | systemd-cat --identifier="krack-build" --priority="emerg"
  fi

  exit 1
}

#######################################
# Prints an info message.
# Globals:
#   WHITE, NC
# Arguments:
#   $1: info message to print
# Returns:
#   none
#######################################
print_info()
{
  printf "%sInfo:%s %s\n" "${WHITE}" "${NC}" "$1"
  
  if [[ "${LOG_SETTING}" == *"systemd"* ]]; then
    printf "%s" "$1" | systemd-cat --identifier="krack-build" --priority="info"
  fi
}

#######################################
# Performs the build cycle as documented in the krack man page.
# Globals:
#   lots?
# Arguments:
#   $1: package directory 
# Returns:
#   none
#######################################
build_package()
{
  local -r directory="$1"
  local -r currentPackage="${directory##*/}"

  cd "${directory}" || exit_script_on_failure "Failed to \`cd\` into ${directory}"

  substate "preparing"

  if [[ -f "${PWD}/krack-prepull.sh" ]]; then
    print_info "Executing krack-prepull.sh"
    # shellcheck disable=SC1091
    source "${PWD}/krack-prepull.sh"
  fi

  # Get current git commit hash
  local -r oldCommitHash="$(git rev-parse HEAD)"

  # Check out a fresh pkgbuild
  git checkout PKGBUILD &> /dev/null

  # Pull in new commits
  # git pull can fail for a multitude of reasons, and we 
  # should prepare to handle it gracefully
  set +Ee

  local gitOutput
  gitOutput="$(git pull)"
  local -r git_pull_return_code="$?"

  set -Ee

  # If git pull failed, report failure and request a new build for next build cycle
  # Hopefully the user will have resolved the issue by then :)
  if [[ "${git_pull_return_code}" != 0 ]]; then
    if [[ "${directory}" != *"git"* ]]; then
      important "Requesting rebuild during next build cycle for ${currentPackage}"
      krackctl request-build "${currentPackage}"
    fi

    important "Git pull in package directory failed before building ${currentPackage}. Cancelling build"
    return
  fi

  if [[ -f "${PWD}/krack-postpull.sh" ]]; then
    print_info "Executing krack-postpull.sh"
    # shellcheck disable=SC1091
    source "${PWD}/krack-postpull.sh"
  fi

  if [[ -f "${PWD}/krack-request-build" ]]; then
    rm -f "${PWD}/krack-request-build"
    print_info "Build was requested manually; proceeding with build"
  elif [[ "${gitOutput}" == *"Already up to date."* ]] && [[ "${directory}" != *"git"* ]]; then
    print_info "No need to build ${currentPackage}, it is already up-to-date and is not a -git package; skipping"
    return
  fi

  if [[ "${directory}" == *"git"* ]]; then
    print_info "${currentPackage} is a -git package; forcing update"
  fi

  # Build is approved, get new git commit hash only if git pulled in something
  if [[ "${gitOutput}" != *"Already up to date."* ]]; then
    local -r newCommitHash="$(git rev-parse HEAD)"
    # ...and store diff to diff dir
    local -r diffFileName="${currentPackage}-$(date "+%Y%m%d-%H%M%S").diff"
    git diff "${oldCommitHash}".."${newCommitHash}" &> "${GIT_DIFF_DIR}/${diffFileName}"
    print_info "Stored diff of pull as ${GIT_DIFF_DIR}/${diffFileName}"
  fi

  substate "making"
  print_info "Building package ${currentPackage}"

  # Empty temporary log file for makechrootpkg output
  # (if makechrootpkg command fails we will make this log permanent and assign a unique build fail ID to it)
  printf "" > "${TMP_LOG}"

  # Record start time for storing and reporting elapsed build time
  local -r buildStartTime="$(date +%s)"

  # Disable some safety stuff here to provide nice output and continue building other packages if one build fails
  set +Eeo pipefail

  # -c: Clean the chroot before building
  # -d: Bind directory into build chroot as read-write (for ccache)
  # -r: The chroot dir to use
  # Arguments passed to makechrootpkg after the
  # end-of-options marker (--) will be passed to makepkg.
  makechrootpkg -c -d "${CCACHE_DIR}"/:/ccache -r "${MAKECHROOTPKG_DIR}" -- CCACHE_DIR=/ccache 2>&1 | tee -a "${TMP_LOG}"

  local -r buildOutcome=${PIPESTATUS[0]}

  # Re-enforce safe exiting
  set -Eeo pipefail

  local -r buildStopTime="$(date +%s)"

  # If the build failed...
  if [[ "${buildOutcome}" != 0 ]]; then
    # Delete old failed build logs for this package
    rm -f "${FAILED_BUILDS_LOG_DIR}/${currentPackage}"*

    # Save tmp log to failed build logs dir
    local -r log_file_name="${currentPackage}-$(date "+%Y%m%d-%H%M%S").log"
    cp "${TMP_LOG}" "${FAILED_BUILDS_LOG_DIR}/${log_file_name}"

    if [[ "${directory}" != *"git"* ]]; then
      important "Requesting rebuild during next build cycle for ${currentPackage}"
      krackctl request-build "${currentPackage}"
    fi

    important "Build for ${currentPackage} failed at $(date). Build output saved to ${log_file_name}"

    [[ -f "${PWD}/krack-postbuild.sh" ]] && \
      print_info "Skipping postbuild script due to build failure"

    print_info "Continuing to the next build"
    return
  fi

  # Otherwise, if build succeeded, continue with following commands

  # Store elapsed build time
  local -r elapsedBuildTime=$(( buildStopTime - buildStartTime ))
  printf "%s" "$(date -d@${elapsedBuildTime} -u +%Hh:%Mm:%Ss)" > "${directory}/.krack-last-build-time"

  if [[ -f "${PWD}/krack-postbuild.sh" ]]; then
    print_info "Executing krack-postbuild.sh"
    # shellcheck disable=SC1091
    source "${PWD}/krack-postbuild.sh"
  fi

  for packageTarball in "${PWD}"/*.pkg.tar.zst; do
    if [[ -f "${PKG_CACHE_DIR}/${packageTarball##*/}" ]]; then
      print_info "Package ${currentPackage} with the same version is already in the krack pkgcache; the cat is mildly annoyed ðŸ˜¾"
      continue
    fi

    print_info "Copying package to local krack-build pkgcache"
    # Remove old packages first
    rm -f "${PKG_CACHE_DIR}/${currentPackage}"*
    cp "${packageTarball}" "${PKG_CACHE_DIR}"

    print_info "Signing package and uploading to ${DROPBOX_PATH}"
    gpg --default-key "${SIGNING_KEY}" --output "${packageTarball}.sig" --detach-sig "${packageTarball}"

    # Sleep for 2 seconds; sometimes the rsync command starts before the sig file has appeared on slower devices
    sleep 2
    rsync -a --progress "${packageTarball}" "${packageTarball}.sig" "krack-receive@${DROPBOX_PATH}:/home/krack-receive/package-dropbox"

    print_info "Package ${currentPackage} built and uploaded successfully; please give your cat a treat ðŸ˜»"
  done
}

write_build_data()
{
  # NYI
  true
  # Write data to json file in pkgdir
  # any relevant build failures?
  # average build time
  # last build time
  # last built version
  # is up-to-date with AUR?
  # number of times built, vs. number of times uploaded

  # {"average-build-time": "","last-build-time": "","last-built-version": "","build-failure": "","number-of-times-built": ""}
}

#######################################
# Writes a setting value to the config file.
# Arguments:
#   $1: key
#   $2: value
#   $3: pkgname
# Returns:
#   none
#######################################
write_setting()
{
  local -r outputFile="${MASTER_BUILD_DIR}/$3/.krack-data.json"
  local -r tmpJson="$(jq "$1 = \"$2\"" "${outputFile}")"
  printf "%s" "${tmpJson}" > "${outputFile}"
}

# Stuff for $(krackctl status) below

#######################################
# Prints an important message.
# Globals:
#   RED, NC
#   LOG_SETTING
#   STATUS_IMPORTANT_MESSAGE_FILE
# Arguments:
#   $1: info message to print
# Returns:
#   none
#######################################
important()
{
  sed -i '/nothing yet :)/d' "${STATUS_IMPORTANT_MESSAGE_FILE}"
  printf "%s\n" "$1" >> "${STATUS_IMPORTANT_MESSAGE_FILE}"
  printf "%sERROR: %s%s\n" "${RED}" "$1" "${NC}"
  
  
  if [[ "${LOG_SETTING}" == *"systemd"* ]]; then
    printf "ERROR: %s" "$1" | systemd-cat --identifier="krack-build" --priority="err"
  fi
}

#######################################
# Updates the state of the running krack-build instance.
# Globals:
#   NEXT_WAKE
#   STATUS_DATE_BUILD_START_FILE
# Arguments:
#   $1: info message to print
# Returns:
#   none
#######################################
state()
{
  case "$1" in
    starting) state_helper "starting up..." ;;
    death) state_helper "pronounced dead at $(date). Kitty is sad ðŸ˜¿" ;;
    sleeping) state_helper "sleeping until ${NEXT_WAKE}" ;;
    building) state_helper "building (started at $(date +%r))"
              date +%s > "${STATUS_DATE_BUILD_START_FILE}"
              ;;
    *) state_helper "unknown. Contact developer at dev@krathalan.net" ;;
  esac
}

state_helper()
{
  printf "%s" "$1" > "${STATUS_STATE_FILE}"
}

#######################################
# Updates the substate of the running krack-build instance.
# Globals:
#   currentPackage
#   STATUS_DATE_BUILD_START_FILE
# Arguments:
#   none
# Returns:
#   none
#######################################
substate()
{
  case "$1" in
    making) substate_helper "making ${currentPackage} package"
            date +%s > "${STATUS_DATE_MAKE_START_FILE}"
            ;;
    preparing) substate_helper "preparing for build" ;;
    uploading) substate_helper "uploading built ${currentPackage} package" ;;
  esac
}

substate_helper()
{
  printf "%s" "$1" > "${STATUS_SUBSTATE_FILE}"
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ "$(whoami)" == "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

# Ensure all important directories exist
# Making FAILED_BUILDS_LOG_DIR makes LOG_DIR
mkdir -p "${MASTER_BUILD_DIR}" \
         "${CCACHE_DIR}" \
         "${FAILED_BUILDS_LOG_DIR}" \
         "${GIT_DIFF_DIR}" \
         "${PKG_CACHE_DIR}" \
         "${STATUS_DIR}"

state "starting"
printf "nothing yet :)" > "${STATUS_IMPORTANT_MESSAGE_FILE}"

if [[ ! -e "${MAKECHROOTPKG_DIR}" ]]; then
  exit_script_on_failure "Makechrootpkg dir ${MAKECHROOTPKG_DIR} doesn't exist. Please run \`sudo krackctl create-chroot\`, or create your own build chroot and specify its location in /etc/krack/build.conf."
fi

if [[ "$*" == *"--start-asleep"* ]]; then
  readonly START_ASLEEP="true"
else
  readonly START_ASLEEP="false"
fi

SKIP_COMPLETE="false"

while true; do
  print_info "Good morning honey, it is $(date) and it's time to build packages again"
  print_info "Flushing important messages log"
  printf "nothing yet :)" > "${STATUS_IMPORTANT_MESSAGE_FILE}"

  if [[ "${SKIP_COMPLETE}" == "false" ]] && [[ "${START_ASLEEP}" == "true" ]]; then
    print_info "Oh boy, extra naps! Starting asleep, zzZZzzz..."
    SKIP_COMPLETE="true"
  else
    print_info "Cleaning out master package directory before building"
    clean_pkgbuild_dirs

    # Update build chroot once before each build cycle, not each time
    # we build with makechrootpkg (to reduce strain on mirrors)
    print_info "Upgrading build chroot before building"
    arch-nspawn "${MAKECHROOTPKG_DIR}/root" pacman -Syu --noconfirm

    state "building"
    # Check for empty build dir (https://unix.stackexchange.com/a/202276)
    # shellcheck disable=2010
    if ls -1qA "${MASTER_BUILD_DIR:-}" | grep -q .; then
      # Run build cycle
      for pkgdir in "${MASTER_BUILD_DIR:-}"/*; do
        if [[ -d "${pkgdir}" ]]; then
          build_package "${pkgdir}"
        fi
      done
      print_info "It is $(date) and all packages have finished building"
    else
      print_info "There are no package directories in ${MASTER_BUILD_DIR:-}."
    fi
  fi

  NEXT_WAKE="$(date -d "$(date)+${SLEEP_HOURS} hours")"
  state "sleeping"
  print_info "The next build cycle will occur ${SLEEP_HOURS} hours from now at ${NEXT_WAKE}"
  # Custom printf here because we don't want a new line, for the spinner
  printf "%sInfo:%s %sNapping until then...%s " "${WHITE}" "${NC}" "${PURPLE}" "${NC}"

  # https://unix.stackexchange.com/a/225183
  sleep "${SLEEP_HOURS}"h &
  sleepPid=$!
  i=1
  sp="/-\|"
  echo -n ' '
  while [[ -d "/proc/${sleepPid}" ]];  do
    printf "\b%s" ${sp:i++%${#sp}:1}

    # Check to see if the user has requested krack-build to wake up
    if check_awaken_request; then
      break
    fi

    sleep 0.75
  done

  printf "\n"
done
