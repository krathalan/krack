#!/usr/bin/env bash
#
# Description: Master builder script :)
#
# Homepage: https://git.sr.ht/~krathalan/miscellaneous-scripts
#
# Copyright (C) 2020 Hunter Peavey
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# Kill possible waiting sleep process if krack-build is terminated
trap "state death && kill 0" SIGINT ERR
trap "clean_up" EXIT SIGINT ERR

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Misc
NEXT_WAKE=""

# Source a lot of common (between krack scripts) variables
# shellcheck disable=SC1091
source /usr/lib/krack/common

# Source user conf
# shellcheck disable=SC1091
source /etc/krack/build.conf

# Used for logging to track failed builds
readonly TMP_DIR="$(mktemp -d -t "krack-build_XXXXXXXX")"
readonly TMP_LOG="${TMP_DIR}/tmp.log"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Checks to see if `krackctl awaken` has been invoked while
# krack-build is sleeping
# Globals:
#   STATUS_DIR
#   sleep_pid
# Arguments:
#   none
# Returns:
#   none
#######################################
check_awaken_request()
{
  if [[ -f "${STATUS_DIR}/krack-request-awaken" ]]; then
    # Clean up request file
    rm -f "${STATUS_DIR}/krack-request-awaken"
    # Clean up our sleeping child....
    kill "${sleep_pid}"
    return 0 # Awaken!
  else
    return 1 # Slumber...
  fi
}

#######################################
# Removes old build artifacts (packages, logs, sigs).
# Globals:
#   MASTER_BUILD_DIR
# Arguments:
#   none
# Returns:
#   none
#######################################
clean_pkgbuild_dirs()
{
  local toClean
  mapfile -t toClean <<< "$(find -L "${MASTER_BUILD_DIR}" -type f \( -name "*.gz" -o -name "*.xz" -o -name "*.zst" -o -name "*.lz4" -o -name "*.log" -o -name "*.sig" \))"

  for file in "${toClean[@]}"; do
    rm -f "${file}"
  done
}

clean_up()
{
  rm -rf "${TMP_DIR}"
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  state "death"
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

#######################################
# Prints an info message.
# Globals:
#   WHITE, NC
# Arguments:
#   $1: info message to print
# Returns:
#   none
#######################################
print_info()
{
  printf "%sInfo:%s %s\n" "${WHITE}" "${NC}" "$1"
  
  if [[ "${LOG_SETTING}" == *"systemd"* ]]; then
    printf "%s" "$1" | systemd-cat --identifier="krack-build" --priority="info"
  fi
}

# Stuff for $(krackctl status) below

#######################################
# Prints an important message.
# Globals:
#   RED, NC
#   LOG_SETTING
#   STATUS_IMPORTANT_MESSAGE_FILE
# Arguments:
#   $1: info message to print
# Returns:
#   none
#######################################
important()
{
  sed -i '/nothing yet :)/d' "${STATUS_IMPORTANT_MESSAGE_FILE}"
  printf "%s\n" "$1" >> "${STATUS_IMPORTANT_MESSAGE_FILE}"
  printf "%sError: %s%s\n" "${RED}" "$1" "${NC}"
  
  
  if [[ "${LOG_SETTING}" == *"systemd"* ]]; then
    printf "ERROR: %s" "$1" | systemd-cat --identifier="krack-build" --priority="err"
  fi
}

#######################################
# Updates the state of the running krack-build instance.
# Globals:
#   NEXT_WAKE
#   STATUS_DATE_BUILD_START_FILE
# Arguments:
#   $1: info message to print
# Returns:
#   none
#######################################
state()
{
  case "$1" in
    starting) state_helper "starting up..." ;;
    death) state_helper "pronounced dead at $(date). Kitty is sad ðŸ˜¿" ;;
    sleeping) state_helper "sleeping until ${NEXT_WAKE}" ;;
    building) state_helper "building (started at $(date +%r))"
              date +%s > "${STATUS_DATE_BUILD_START_FILE}"
              ;;
    *) state_helper "unknown. Contact developer at srht@krathalan.net" ;;
  esac
}

state_helper()
{
  printf "%s" "$1" > "${STATUS_STATE_FILE}"
}

#######################################
# Updates the substate of the running krack-build instance.
# Globals:
#   current_package
#   STATUS_DATE_BUILD_START_FILE
# Arguments:
#   none
# Returns:
#   none
#######################################
substate()
{
  case "$1" in
    making) substate_helper "making ${current_package} package (started at $(date +%r))"
            date +%s > "${STATUS_DATE_MAKE_START_FILE}"
            ;;
    preparing) substate_helper "preparing for build" ;;
    uploading) substate_helper "uploading built ${current_package} package" ;;
  esac
}

substate_helper()
{
  printf "%s" "$1" > "${STATUS_SUBSTATE_FILE}"
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ "$(whoami)" == "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

# Ensure all important directories exist
# Making FAILED_BUILDS_LOG_DIR makes LOG_DIR
mkdir -p "${MASTER_BUILD_DIR}" \
         "${CCACHE_DIR}" \
         "${FAILED_BUILDS_LOG_DIR}" \
         "${PKG_CACHE_DIR}" \
         "${STATUS_DIR}"

state "starting"
printf "nothing yet :)" > "${STATUS_IMPORTANT_MESSAGE_FILE}"

if [[ ! -e "${MAKECHROOTPKG_DIR}" ]]; then
  exit_script_on_failure "Makechrootpkg dir ${MAKECHROOTPKG_DIR} doesn't exist. Please run \`sudo krackctl create-chroot\`."
fi

if [[ "$*" == *"--start-asleep"* ]]; then
  readonly START_ASLEEP="true"
else
  readonly START_ASLEEP="false"
fi

SKIP_COMPLETE="false"

while true; do
  state "building"
  print_info "Good morning honey, it is $(date) and it's time to build packages again"
  print_info "Flushing important messages log"
  printf "nothing yet :)" > "${STATUS_IMPORTANT_MESSAGE_FILE}"

  if [[ "${SKIP_COMPLETE}" == "false" ]] && [[ "${START_ASLEEP}" == "true" ]]; then
    print_info "Oh boy, extra naps! Starting asleep"
    SKIP_COMPLETE="true"
  else
    print_info "Cleaning out master package directory before building"
    clean_pkgbuild_dirs

    # Update build chroot once before each build cycle, not each time
    # we build with makechrootpkg (to reduce strain on mirrors)
    print_info "Upgrading build chroot before building"
    arch-nspawn "${MAKECHROOTPKG_DIR}/root" pacman -Syu --noconfirm

    for directory in "${MASTER_BUILD_DIR:-}"/*; do
      if [[ -d "${directory}" ]]; then
        cd "${directory}" || exit_script_on_failure "Failed to \`cd\` into ${directory}"
        current_package="${directory##*/}"

        substate "preparing"

        if [[ -f "${PWD}/krack-prepull.sh" ]]; then
          print_info "Executing krack-prepull.sh"
          # shellcheck disable=SC1090
          source "${PWD}/krack-prepull.sh"
        fi

        # Check out a fresh pkgbuild; pull any diffs
        git checkout PKGBUILD &> /dev/null

        # This command (git pull) can fail for a multitude of reasons,
        # and we should prepare to handle it gracefully
        set +Ee

        git_output="$(git pull)"
        git_pull_return_code="$?"

        if [[ "${git_pull_return_code}" != 0 ]]; then
          important "Git pull in package directory failed before building ${current_package}. Cancelling build"
          # Don't forget to re-set -Ee if we're going to `continue` out of this build cycle
          set -Ee
          continue
        fi

        set -Ee

        if [[ -f "${PWD}/krack-postpull.sh" ]]; then
          print_info "Executing krack-postpull.sh"
          # shellcheck disable=SC1090
          source "${PWD}/krack-postpull.sh"
        fi

        if [[ -f "${PWD}/krack-request-build" ]]; then
          rm -f "${PWD}/krack-request-build"
          print_info "Build was requested manually; proceeding with build"
        elif [[ "${git_output}" == *"Already up to date."* ]] && [[ "${directory}" != *"git"* ]]; then
          print_info "No need to build ${current_package}, it is already up-to-date and is not a -git package; skipping"
          continue
        fi

        if [[ "${directory}" == *"git"* ]]; then
          print_info "${current_package} is a -git package; forcing update"
        fi

        substate "making"
        print_info "Building package ${current_package}"

        # Empty temporary log file for makechrootpkg output
        # (if makechrootpkg command fails we will make this log permanent and assign a unique build fail ID to it)
        printf "" > "${TMP_LOG}"

        # Disable some safety stuff here to provide nice output and continue building other packages if one build fails
        set +Ee

        # -c: Clean the chroot before building
        # -d: Bind directory into build chroot as read-write
        # -r: The chroot dir to use
        # Arguments passed to makechrootpkg after the
        # end-of-options marker (--) will be passed to makepkg.
        makechrootpkg -c -d "${CCACHE_DIR}"/:/ccache -r "${MAKECHROOTPKG_DIR}" -- CCACHE_DIR=/ccache 2>&1 | tee -a "${TMP_LOG}"

        build_outcome=${PIPESTATUS[0]}

        # Re-enforce safe exiting
        set -Ee

        # If the build failed...
        if [[ "${build_outcome}" != 0 ]]; then
          log_file_name="${current_package}-$(uuidgen | cut -d'-' -f5).log"
          mv "${TMP_LOG}" "${FAILED_BUILDS_LOG_DIR}/${log_file_name}"

          important "Build for ${current_package} failed at $(date). Build output saved to ${log_file_name}"

          [[ -f "${PWD}/krack-postbuild.sh" ]] && \
            print_info "Skipping postbuild script due to build failure"

          print_info "Continuing to the next build"
          continue
        fi

        if [[ -f "${PWD}/krack-postbuild.sh" ]]; then
          print_info "Executing krack-postbuild.sh"
          # shellcheck disable=SC1090
          source "${PWD}/krack-postbuild.sh"
        fi

        for package_tarball in "${PWD}"/*.pkg.tar.zst; do
          if [[ -f "${PKG_CACHE_DIR}/${package_tarball##*/}" ]]; then
            print_info "Package ${current_package} with the same version is already in the krack pkgcache; the cat is mildly annoyed ðŸ˜¾"
            continue
          fi

          print_info "Copying package to local krack-build pkgcache"
          # Remove old packages first
          rm -f "${PKG_CACHE_DIR}/${current_package}"*
          cp "${package_tarball}" "${PKG_CACHE_DIR}"

          print_info "Signing package and uploading to ${DROPBOX_PATH}"
          gpg --default-key "${SIGNING_KEY}" --output "${package_tarball}.sig" --detach-sig "${package_tarball}"

          # Sleep for 2 seconds; sometimes the rsync command starts before the sig file has appeared on slower devices
          sleep 2
          rsync -a --progress "${package_tarball}" "${package_tarball}.sig" "${DROPBOX_PATH}"

          print_info "Package ${current_package} built and uploaded successfully; please give your cat a treat ðŸ˜»"
        done
      fi
    done

    print_info "It is $(date) and all packages have finished building"
  fi

  NEXT_WAKE="$(date -d "$(date)+${SLEEP_HOURS} hours")"
  state "sleeping"
  print_info "The next daily package rebuild will occur ${SLEEP_HOURS} hours from now at ${NEXT_WAKE}"
  # Custom printf here because we don't want a new line (for the spinner) :)
  printf "%sInfo:%s %sNapping until then...%s " "${WHITE}" "${NC}" "${PURPLE}" "${NC}"

  # https://unix.stackexchange.com/questions/225179/display-spinner-while-waiting-for-some-process-to-finish/225183#225183
  sleep "${SLEEP_HOURS}"h &
  sleep_pid=$!
  i=1
  sp="/-\|"
  echo -n ' '
  while [[ -d "/proc/$sleep_pid" ]];  do
    printf "\b%s" ${sp:i++%${#sp}:1}

    if check_awaken_request; then
      break
    fi

    sleep 0.75
  done

  printf "\n"
done
