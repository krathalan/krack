#!/usr/bin/env bash
#
# Description: Master builder script :)
#
# Homepage: https://git.sr.ht/~krathalan/miscellaneous-scripts
#
# Copyright (C) 2020 Hunter Peavey
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly WHITE=$(tput sgr0 && tput bold)
readonly GREEN=$(tput sgr0 && tput setaf 2)
readonly RED=$(tput bold && tput setaf 1)
readonly YELLOW=$(tput sgr0 && tput setaf 3)
readonly BLUE=$(tput sgr0 && tput setaf 4)
readonly PURPLE=$(tput sgr0 && tput setaf 5)
readonly CYAN=$(tput sgr0 && tput setaf 6)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# Other
readonly BUILD_USER="builder"
readonly MASTER_BUILD_DIR="/home/${BUILD_USER}/aur"
readonly CCACHE_DIR="/home/${BUILD_USER}/.cache/ccache"
readonly MAKECHROOTPKG_DIR="/var/lib/makechrootpkg"
readonly SIGNING_KEY="1C52FC395F059E60180BB53BCD9097F0E64296BB"
readonly SCRIPT_NAME="${0##*/}"

# -----------------------------------------
# ------------- User variables ------------
# -----------------------------------------

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

# Removes old packages built with make(chroot)pkg
clean_pkgbuild_dirs()
{
  local -r dirsToClean=("${MASTER_BUILD_DIR}")
  local toClean

  for directory in "${dirsToClean[@]}"; do
    if [[ -d "${directory}" ]]; then
      mapfile -t toClean <<< "$(find "${directory}" -type f \( -name "*.gz" -o -name "*.xz" -o -name "*.zst" -o -name "*.lz4" -o -name "*.log" -o -name "*.sig" \))"

      for file in "${toClean[@]}"; do
        rm -f "${file}"
      done
    else
      printf "\nSkipping %s, does not exist\n" "${directory}"
    fi
  done
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

#######################################
# Prints an info message.
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
print_info()
{
  printf "%sInfo:%s %s\n" "${WHITE}" "${NC}" "$1"
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

# makechrootpkg -c -u -d ${CCACHE_DIR}/:/ccache -r /var/lib/makechrootpkg -- CCACHE_DIR=/ccache

[[ "$(whoami)" = "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

[[ -z "${MASTER_BUILD_DIR:-}" ]] &&
  exit_script_on_failure "Please set an environment variable \$MASTER_BUILD_DIR defining the directory containing all package directories (e.g. \"/home/builder/aur\")."

if [[ ! -e "${CCACHE_DIR}" ]]; then
  print_info "Making \$CCACHE_DIR ${CCACHE_DIR} directory"
  mkdir -p "${CCACHE_DIR}"
fi

if [[ ! -e "${MAKECHROOTPKG_DIR}" ]]; then
  print_info "Makechrootpkg dir ${MAKECHROOTPKG_DIR} doesn't exist; making it..."
  sudo mkdir -p "${MAKECHROOTPKG_DIR}"
  sudo mkarchroot "${MAKECHROOTPKG_DIR}"/root base-devel ccache
  print_info "Done making ${MAKECHROOTPKG_DIR} makechrootpkg dir."
fi

if [[ "$*" == *"--start-asleep"* ]]; then
  readonly START_ASLEEP="true"
else
  readonly START_ASLEEP="false"
fi

SKIP_COMPLETE="false"

while true; do
  print_info "${CYAN}Good morning, it is $(date) and it's time to build packages again${NC}"

  if [[ "${SKIP_COMPLETE}" == "false" ]] && [[ "${START_ASLEEP}" == "true" ]]; then
    print_info "Oh boy, extra naps! Starting asleep"
    SKIP_COMPLETE="true"
  else
    print_info "Cleaning out master package directory before we begin building"
    clean_pkgbuild_dirs

    for directory in "${MASTER_BUILD_DIR:-}"/*; do
      if [[ -d "${directory}" ]]; then
        cd "${directory}" || exit_script_on_failure "Failed to \`cd\` into ${directory}"

        if [[ -f "${PWD}/krack-prepull.sh" ]]; then
          print_info "Executing krack-prepull.sh"
          # shellcheck disable=SC1090
          source "${PWD}/krack-prepull.sh"
        fi

        # Check out a fresh pkgbuild; pull any diffs
        git checkout PKGBUILD &> /dev/null
        git_output="$(git pull)"

        if [[ -f "${PWD}/krack-postpull.sh" ]]; then
          print_info "Executing krack-postpull.sh"
          # shellcheck disable=SC1090
          source "${PWD}/krack-postpull.sh"
        fi

        if [[ -f "${PWD}/krack-request-build" ]]; then
          rm -f "${PWD}/krack-request-build"
          print_info "Build was requested manually; proceeding with build"
        elif [[ "${git_output}" == *"Already up to date."* ]] && [[ "${directory}" != *"git"* ]]; then
          print_info "No need to build ${directory##*/}, it is already ${GREEN}up-to-date${NC} and is not a -git package; skipping"
          continue
        fi

        if [[ "${directory}" == *"git"* ]]; then
          print_info "${directory##*/} is a -git package; ${BLUE}forcing update${NC}"
        fi

        print_info "${BLUE}Building package ${directory##*/}${NC}"

        # -c: Clean the chroot before building
        # -u: Update the working copy of the chroot before building
        # -d: Bind directory into build chroot as read-write
        # -r: The chroot dir to use
        # Arguments passed to makechrootpkg after the
        # end-of-options marker (--) will be passed to makepkg. 
        makechrootpkg -c -u -d ${CCACHE_DIR}/:/ccache -r ${MAKECHROOTPKG_DIR} -- CCACHE_DIR=/ccache

        if [[ -f "${PWD}/krack-postbuild.sh" ]]; then
          print_info "Executing krack-postbuild.sh"
          # shellcheck disable=SC1090
          source "${PWD}/krack-postbuild.sh"
        fi

        for package in "${PWD}"/*.pkg.tar.zst; do
          if [[ -f "/var/cache/pacman/pkg/${package##*/}" ]]; then
            print_info "${YELLOW}Package ${package##*/} is already built, the cat is mildly annoyed ðŸ˜¾${NC}"
            continue
          fi

          print_info "Copying package to local pacman cache"
          sudo cp "${package}" /var/cache/pacman/pkg/
          sudo chown root:root /var/cache/pacman/pkg/"${package##*/}"

          print_info "Signing package and uploading to builds.krathalan.net"
          gpg --default-key "${SIGNING_KEY}" --output "${package}.sig" --detach-sig "${package}"
          
          sleep 2
          rsync "${package}" "${package}.sig" krack-receive@krathalan.net:~/package-dropbox

          print_info "${GREEN}Package ${package##*/} built successfully, please give your cat a treat ðŸ˜»${NC}"
        done
      fi
    done

    print_info "It is $(date) and all packages have finished building"
  fi
  
  print_info "The next daily package rebuild will occur 24 hours from now at $(date -d "$(date)+24 hours")"

  # Custom printf here because we don't want a new line :)
  printf "%sInfo:%s %sNapping until then...%s " "${WHITE}" "${NC}" "${PURPLE}" "${NC}"

  # https://unix.stackexchange.com/questions/225179/display-spinner-while-waiting-for-some-process-to-finish/225183#225183
  sleep 86400 &
  sleep_pid=$!
  i=1
  sp="/-\|"
  echo -n ' '
  while [ -d "/proc/$sleep_pid" ]
  do
    printf "\b%s" ${sp:i++%${#sp}:1}
    sleep 0.75
  done

  printf "\n"
done